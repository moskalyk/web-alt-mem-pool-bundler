/* eslint-disable */
// @ts-nocheck
/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.12.2
 *
 */
import type { IFluenceClient as IFluenceClient$$, CallParams as CallParams$$ } from '@fluencelabs/js-client';
import {
    v5_callFunction as callFunction$$,
    v5_registerService as registerService$$,
} from '@fluencelabs/js-client';
    
// Services
export interface AltPoolDef {
    read: (callParams: CallParams$$<null>) => { address: string; nonce: number; }[] | Promise<{ address: string; nonce: number; }[]>;
    write: (peer_id: string, user_op: { address: string; nonce: number; }, client: boolean, callParams: CallParams$$<'peer_id' | 'user_op' | 'client'>) => boolean | Promise<boolean>;
}
export function registerAltPool(service: AltPoolDef): void;
export function registerAltPool(serviceId: string, service: AltPoolDef): void;
export function registerAltPool(peer: FluencePeer, service: AltPoolDef): void;
export function registerAltPool(peer: FluencePeer, serviceId: string, service: AltPoolDef): void;
export function registerAltPool(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "AltPool",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "read" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "nil"
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "UserOperation",
                                "fields" : {
                                    "address" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "nonce" : {
                                        "tag" : "scalar",
                                        "name" : "i64"
                                    }
                                }
                            }
                        }
                    ]
                }
            },
            "write" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "peer_id" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "user_op" : {
                            "tag" : "struct",
                            "name" : "UserOperation",
                            "fields" : {
                                "address" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "nonce" : {
                                    "tag" : "scalar",
                                    "name" : "i64"
                                }
                            }
                        },
                        "client" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    ]
                }
            }
        }
    }
}
    );
}

// Functions
export function readPool(
    peer_id: string,
    config?: {ttl?: number}
): Promise<{ address: string; nonce: number; }[]>;

export function readPool(
    peer: FluencePeer,
    peer_id: string,
    config?: {ttl?: number}
): Promise<{ address: string; nonce: number; }[]>;

export function readPool(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "peer_id") [] peer_id)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call peer_id ("AltPool" "read") [] res)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "readPool",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "peer_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "struct",
                        "name" : "UserOperation",
                        "fields" : {
                            "address" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "nonce" : {
                                "tag" : "scalar",
                                "name" : "i64"
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

export type WriteToPoolArgUser_op = { address: string; nonce: number; } 

export function writeToPool(
    user_op: WriteToPoolArgUser_op,
    peer_id: string,
    client: boolean,
    config?: {ttl?: number}
): Promise<boolean>;

export function writeToPool(
    peer: FluencePeer,
    user_op: WriteToPoolArgUser_op,
    peer_id: string,
    client: boolean,
    config?: {ttl?: number}
): Promise<boolean>;

export function writeToPool(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (call %init_peer_id% ("getDataSrv" "user_op") [] user_op)
                          )
                          (call %init_peer_id% ("getDataSrv" "peer_id") [] peer_id)
                         )
                         (call %init_peer_id% ("getDataSrv" "client") [] client)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call peer_id ("AltPool" "write") [peer_id user_op client] res)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "writeToPool",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "user_op" : {
                    "tag" : "struct",
                    "name" : "UserOperation",
                    "fields" : {
                        "address" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "nonce" : {
                            "tag" : "scalar",
                            "name" : "i64"
                        }
                    }
                },
                "peer_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "client" : {
                    "tag" : "scalar",
                    "name" : "bool"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "bool"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

export const resilience_script = `
                    (seq
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "name") [] -name-arg-)
                       )
                       (xor
                        (seq
                         (seq
                          (seq
                           (seq
                            (new $option-inline
                             (seq
                              (seq
                               (seq
                                (new $array-inline
                                 (seq
                                  (seq
                                   (seq
                                    (seq
                                     (seq
                                      (seq
                                       (call %init_peer_id% ("json" "obj") ["hostId" "12D3KooWFbasz6SnGxhPq3KWn8KgNW4asNKskxR5JizMdszM4KCN" "spellId" "274cf5b0-c244-4777-a5f1-a4658019156b" "workerId" "12D3KooWHXZoS1CRQihNU7zoBQtCkZoysHVW4ZGNRcvXJZdiTjAs"] SpellLocation_obj)
                                       (call %init_peer_id% ("json" "obj") ["hostId" "12D3KooWBCAWAGNMfqaBG1kUv49dkK8wSNeiTfGubLLjGQaFBf6z" "spellId" "364fabd1-47aa-4eb8-b266-16a278c82a4d" "workerId" "12D3KooWQGU6LLHEaXPAHygopNwSctbNGtiG8UhqWuPSmu4AJBV9"] SpellLocation_obj-0)
                                      )
                                      (call %init_peer_id% ("json" "obj") ["hostId" "12D3KooWEqbHHE1bzk1nJ8LE2Wbm2UaycYjRsSB4CTxDS342Boip" "spellId" "fd572d5a-70ff-411b-9a4c-9cede08db361" "workerId" "12D3KooWRHzLGQ9FxitVpt6RtYrxM8XfTci2yuNWAKEYbZbzxSqc"] SpellLocation_obj-1)
                                     )
                                     (ap SpellLocation_obj $array-inline)
                                    )
                                    (ap SpellLocation_obj-0 $array-inline)
                                   )
                                   (ap SpellLocation_obj-1 $array-inline)
                                  )
                                  (canon %init_peer_id% $array-inline  #array-inline-0)
                                 )
                                )
                                (call %init_peer_id% ("json" "obj") ["definition" "bafkreicmunaohvcik2z7unysh2pcdhmt7gofvwecwkfoqvtvw3qn7mkdxa" "dummyDealId" "defaultWorker_12D3KooWLbTpQHXCSHiULa6NZC3WCzEehY3PwNmAvjc2X2mPrdiF_0731451842952413" "installationSpells" #array-inline-0 "relayId" "12D3KooWFbasz6SnGxhPq3KWn8KgNW4asNKskxR5JizMdszM4KCN" "timestamp" "2023-10-25T22:15:41.362Z"] Host_obj)
                               )
                               (xor
                                (ap Host_obj $option-inline)
                                (null)
                               )
                              )
                              (canon %init_peer_id% $option-inline  #option-inline-0)
                             )
                            )
                            (call %init_peer_id% ("json" "obj") ["defaultWorker" #option-inline-0] Hosts_obj)
                           )
                           (ap Hosts_obj.$.defaultWorker Hosts_obj_flat)
                          )
                          (ap Hosts_obj_flat.$.[0].installationSpells Hosts_obj_flat_flat)
                         )
                         (new $results_test
                          (seq
                           (seq
                            (seq
                             (call %init_peer_id% ("math" "add") [0 1] results_incr)
                             (fold $results results_fold_var
                              (seq
                               (seq
                                (ap results_fold_var $results_test)
                                (canon %init_peer_id% $results_test  #results_iter_canon)
                               )
                               (xor
                                (match #results_iter_canon.length results_incr
                                 (null)
                                )
                                (next results_fold_var)
                               )
                              )
                              (never)
                             )
                            )
                            (canon %init_peer_id% $results_test  #results_result_canon)
                           )
                           (ap #results_result_canon results_gate)
                          )
                         )
                        )
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 0])
                       )
                      )
                      (canon %init_peer_id% $results  #results_canon)
                     )
                     (call %init_peer_id% ("callbackSrv" "response") [#results_canon])
                    )
    `
 

export function resilience(
    name: string,
    config?: {ttl?: number}
): Promise<string[]>;

export function resilience(
    peer: IFluenceClient$$,
    name: string,
    config?: {ttl?: number}
): Promise<string[]>;

export function resilience(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "resilience",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "name" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        resilience_script
    )
}

export const context_script = `
                    (seq
                     (seq
                      (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                      (xor
                       (seq
                        (seq
                         (call %init_peer_id% ("run-console" "print") ["in terminal"])
                         (xor
                          (call -relay- ("run-console" "print") ["on relay peer"])
                          (fail %last_error%)
                         )
                        )
                        (call %init_peer_id% ("run-console" "print") ["back in terminal"])
                       )
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 0])
                      )
                     )
                     (call %init_peer_id% ("callbackSrv" "response") [true])
                    )
    `
 

export function context(
    config?: {ttl?: number}
): Promise<boolean>;

export function context(
    peer: IFluenceClient$$,
    config?: {ttl?: number}
): Promise<boolean>;

export function context(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "context",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "bool"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        context_script
    )
}

export const deletePeer_script = `
                    (seq
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "peer_id") [] -peer_id-arg-)
                       )
                       (xor
                        (seq
                         (seq
                          (seq
                           (seq
                            (new $option-inline
                             (seq
                              (seq
                               (seq
                                (new $array-inline
                                 (seq
                                  (seq
                                   (seq
                                    (seq
                                     (seq
                                      (seq
                                       (call %init_peer_id% ("json" "obj") ["hostId" "12D3KooWFbasz6SnGxhPq3KWn8KgNW4asNKskxR5JizMdszM4KCN" "spellId" "274cf5b0-c244-4777-a5f1-a4658019156b" "workerId" "12D3KooWHXZoS1CRQihNU7zoBQtCkZoysHVW4ZGNRcvXJZdiTjAs"] SpellLocation_obj)
                                       (call %init_peer_id% ("json" "obj") ["hostId" "12D3KooWBCAWAGNMfqaBG1kUv49dkK8wSNeiTfGubLLjGQaFBf6z" "spellId" "364fabd1-47aa-4eb8-b266-16a278c82a4d" "workerId" "12D3KooWQGU6LLHEaXPAHygopNwSctbNGtiG8UhqWuPSmu4AJBV9"] SpellLocation_obj-0)
                                      )
                                      (call %init_peer_id% ("json" "obj") ["hostId" "12D3KooWEqbHHE1bzk1nJ8LE2Wbm2UaycYjRsSB4CTxDS342Boip" "spellId" "fd572d5a-70ff-411b-9a4c-9cede08db361" "workerId" "12D3KooWRHzLGQ9FxitVpt6RtYrxM8XfTci2yuNWAKEYbZbzxSqc"] SpellLocation_obj-1)
                                     )
                                     (ap SpellLocation_obj $array-inline)
                                    )
                                    (ap SpellLocation_obj-0 $array-inline)
                                   )
                                   (ap SpellLocation_obj-1 $array-inline)
                                  )
                                  (canon %init_peer_id% $array-inline  #array-inline-0)
                                 )
                                )
                                (call %init_peer_id% ("json" "obj") ["definition" "bafkreicmunaohvcik2z7unysh2pcdhmt7gofvwecwkfoqvtvw3qn7mkdxa" "dummyDealId" "defaultWorker_12D3KooWLbTpQHXCSHiULa6NZC3WCzEehY3PwNmAvjc2X2mPrdiF_0731451842952413" "installationSpells" #array-inline-0 "relayId" "12D3KooWFbasz6SnGxhPq3KWn8KgNW4asNKskxR5JizMdszM4KCN" "timestamp" "2023-10-25T22:15:41.362Z"] Host_obj)
                               )
                               (xor
                                (ap Host_obj $option-inline)
                                (null)
                               )
                              )
                              (canon %init_peer_id% $option-inline  #option-inline-0)
                             )
                            )
                            (call %init_peer_id% ("json" "obj") ["defaultWorker" #option-inline-0] Hosts_obj)
                           )
                           (ap Hosts_obj.$.defaultWorker Hosts_obj_flat)
                          )
                          (ap Hosts_obj_flat.$.[0].installationSpells Hosts_obj_flat_flat)
                         )
                         (fold Hosts_obj_flat_flat w-0
                          (seq
                           (xor
                            (seq
                             (seq
                              (seq
                               (seq
                                (seq
                                 (seq
                                  (new $-ephemeral-stream-
                                   (new #-ephemeral-canon-
                                    (canon -relay- $-ephemeral-stream-  #-ephemeral-canon-)
                                   )
                                  )
                                  (new $-ephemeral-stream-
                                   (new #-ephemeral-canon-
                                    (canon w-0.$.hostId $-ephemeral-stream-  #-ephemeral-canon-)
                                   )
                                  )
                                 )
                                 (call w-0.$.workerId ("myService" "remove_peer") [-peer_id-arg-] ret)
                                )
                                (call w-0.$.workerId ("run-console" "print") [ret])
                               )
                               (ap true $results)
                              )
                              (new $-ephemeral-stream-
                               (new #-ephemeral-canon-
                                (canon w-0.$.hostId $-ephemeral-stream-  #-ephemeral-canon-)
                               )
                              )
                             )
                             (new $-ephemeral-stream-
                              (new #-ephemeral-canon-
                               (canon -relay- $-ephemeral-stream-  #-ephemeral-canon-)
                              )
                             )
                            )
                            (seq
                             (seq
                              (seq
                               (new $-ephemeral-stream-
                                (new #-ephemeral-canon-
                                 (canon w-0.$.hostId $-ephemeral-stream-  #-ephemeral-canon-)
                                )
                               )
                               (new $-ephemeral-stream-
                                (new #-ephemeral-canon-
                                 (canon -relay- $-ephemeral-stream-  #-ephemeral-canon-)
                                )
                               )
                              )
                              (new $-ephemeral-stream-
                               (new #-ephemeral-canon-
                                (canon %init_peer_id% $-ephemeral-stream-  #-ephemeral-canon-)
                               )
                              )
                             )
                             (fail %last_error%)
                            )
                           )
                           (next w-0)
                          )
                         )
                        )
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 0])
                       )
                      )
                      (canon %init_peer_id% $results  #results_canon)
                     )
                     (call %init_peer_id% ("callbackSrv" "response") [#results_canon])
                    )
    `
 

export function deletePeer(
    peer_id: string,
    config?: {ttl?: number}
): Promise<boolean[]>;

export function deletePeer(
    peer: IFluenceClient$$,
    peer_id: string,
    config?: {ttl?: number}
): Promise<boolean[]>;

export function deletePeer(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "deletePeer",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "peer_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "bool"
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        deletePeer_script
    )
}

export const getPeers_script = `
                    (seq
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (xor
                        (seq
                         (seq
                          (seq
                           (seq
                            (new $option-inline
                             (seq
                              (seq
                               (seq
                                (new $array-inline
                                 (seq
                                  (seq
                                   (seq
                                    (seq
                                     (seq
                                      (seq
                                       (call %init_peer_id% ("json" "obj") ["hostId" "12D3KooWFbasz6SnGxhPq3KWn8KgNW4asNKskxR5JizMdszM4KCN" "spellId" "274cf5b0-c244-4777-a5f1-a4658019156b" "workerId" "12D3KooWHXZoS1CRQihNU7zoBQtCkZoysHVW4ZGNRcvXJZdiTjAs"] SpellLocation_obj)
                                       (call %init_peer_id% ("json" "obj") ["hostId" "12D3KooWBCAWAGNMfqaBG1kUv49dkK8wSNeiTfGubLLjGQaFBf6z" "spellId" "364fabd1-47aa-4eb8-b266-16a278c82a4d" "workerId" "12D3KooWQGU6LLHEaXPAHygopNwSctbNGtiG8UhqWuPSmu4AJBV9"] SpellLocation_obj-0)
                                      )
                                      (call %init_peer_id% ("json" "obj") ["hostId" "12D3KooWEqbHHE1bzk1nJ8LE2Wbm2UaycYjRsSB4CTxDS342Boip" "spellId" "fd572d5a-70ff-411b-9a4c-9cede08db361" "workerId" "12D3KooWRHzLGQ9FxitVpt6RtYrxM8XfTci2yuNWAKEYbZbzxSqc"] SpellLocation_obj-1)
                                     )
                                     (ap SpellLocation_obj $array-inline)
                                    )
                                    (ap SpellLocation_obj-0 $array-inline)
                                   )
                                   (ap SpellLocation_obj-1 $array-inline)
                                  )
                                  (canon %init_peer_id% $array-inline  #array-inline-0)
                                 )
                                )
                                (call %init_peer_id% ("json" "obj") ["definition" "bafkreicmunaohvcik2z7unysh2pcdhmt7gofvwecwkfoqvtvw3qn7mkdxa" "dummyDealId" "defaultWorker_12D3KooWLbTpQHXCSHiULa6NZC3WCzEehY3PwNmAvjc2X2mPrdiF_0731451842952413" "installationSpells" #array-inline-0 "relayId" "12D3KooWFbasz6SnGxhPq3KWn8KgNW4asNKskxR5JizMdszM4KCN" "timestamp" "2023-10-25T22:15:41.362Z"] Host_obj)
                               )
                               (xor
                                (ap Host_obj $option-inline)
                                (null)
                               )
                              )
                              (canon %init_peer_id% $option-inline  #option-inline-0)
                             )
                            )
                            (call %init_peer_id% ("json" "obj") ["defaultWorker" #option-inline-0] Hosts_obj)
                           )
                           (ap Hosts_obj.$.defaultWorker Hosts_obj_flat)
                          )
                          (ap Hosts_obj_flat.$.[0].installationSpells Hosts_obj_flat_flat)
                         )
                         (fold Hosts_obj_flat_flat w-0
                          (seq
                           (xor
                            (seq
                             (seq
                              (seq
                               (seq
                                (seq
                                 (new $-ephemeral-stream-
                                  (new #-ephemeral-canon-
                                   (canon -relay- $-ephemeral-stream-  #-ephemeral-canon-)
                                  )
                                 )
                                 (new $-ephemeral-stream-
                                  (new #-ephemeral-canon-
                                   (canon w-0.$.hostId $-ephemeral-stream-  #-ephemeral-canon-)
                                  )
                                 )
                                )
                                (call w-0.$.workerId ("myService" "get_peers") [] ret)
                               )
                               (ap ret $results)
                              )
                              (new $-ephemeral-stream-
                               (new #-ephemeral-canon-
                                (canon w-0.$.hostId $-ephemeral-stream-  #-ephemeral-canon-)
                               )
                              )
                             )
                             (new $-ephemeral-stream-
                              (new #-ephemeral-canon-
                               (canon -relay- $-ephemeral-stream-  #-ephemeral-canon-)
                              )
                             )
                            )
                            (seq
                             (seq
                              (seq
                               (new $-ephemeral-stream-
                                (new #-ephemeral-canon-
                                 (canon w-0.$.hostId $-ephemeral-stream-  #-ephemeral-canon-)
                                )
                               )
                               (new $-ephemeral-stream-
                                (new #-ephemeral-canon-
                                 (canon -relay- $-ephemeral-stream-  #-ephemeral-canon-)
                                )
                               )
                              )
                              (new $-ephemeral-stream-
                               (new #-ephemeral-canon-
                                (canon %init_peer_id% $-ephemeral-stream-  #-ephemeral-canon-)
                               )
                              )
                             )
                             (fail %last_error%)
                            )
                           )
                           (next w-0)
                          )
                         )
                        )
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 0])
                       )
                      )
                      (canon %init_peer_id% $results  #results_canon)
                     )
                     (call %init_peer_id% ("callbackSrv" "response") [#results_canon])
                    )
    `
 

export function getPeers(
    config?: {ttl?: number}
): Promise<string[][]>;

export function getPeers(
    peer: IFluenceClient$$,
    config?: {ttl?: number}
): Promise<string[][]>;

export function getPeers(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "getPeers",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "array",
                        "type" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        getPeers_script
    )
}

export const consensus_script = `
                    (seq
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "name") [] -name-arg-)
                       )
                       (xor
                        (new $consensus
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (seq
                               (seq
                                (seq
                                 (seq
                                  (seq
                                   (new $option-inline
                                    (seq
                                     (seq
                                      (seq
                                       (new $array-inline
                                        (seq
                                         (seq
                                          (seq
                                           (seq
                                            (seq
                                             (seq
                                              (call %init_peer_id% ("json" "obj") ["hostId" "12D3KooWFbasz6SnGxhPq3KWn8KgNW4asNKskxR5JizMdszM4KCN" "spellId" "274cf5b0-c244-4777-a5f1-a4658019156b" "workerId" "12D3KooWHXZoS1CRQihNU7zoBQtCkZoysHVW4ZGNRcvXJZdiTjAs"] SpellLocation_obj)
                                              (call %init_peer_id% ("json" "obj") ["hostId" "12D3KooWBCAWAGNMfqaBG1kUv49dkK8wSNeiTfGubLLjGQaFBf6z" "spellId" "364fabd1-47aa-4eb8-b266-16a278c82a4d" "workerId" "12D3KooWQGU6LLHEaXPAHygopNwSctbNGtiG8UhqWuPSmu4AJBV9"] SpellLocation_obj-0)
                                             )
                                             (call %init_peer_id% ("json" "obj") ["hostId" "12D3KooWEqbHHE1bzk1nJ8LE2Wbm2UaycYjRsSB4CTxDS342Boip" "spellId" "fd572d5a-70ff-411b-9a4c-9cede08db361" "workerId" "12D3KooWRHzLGQ9FxitVpt6RtYrxM8XfTci2yuNWAKEYbZbzxSqc"] SpellLocation_obj-1)
                                            )
                                            (ap SpellLocation_obj $array-inline)
                                           )
                                           (ap SpellLocation_obj-0 $array-inline)
                                          )
                                          (ap SpellLocation_obj-1 $array-inline)
                                         )
                                         (canon %init_peer_id% $array-inline  #array-inline-0)
                                        )
                                       )
                                       (call %init_peer_id% ("json" "obj") ["definition" "bafkreicmunaohvcik2z7unysh2pcdhmt7gofvwecwkfoqvtvw3qn7mkdxa" "dummyDealId" "defaultWorker_12D3KooWLbTpQHXCSHiULa6NZC3WCzEehY3PwNmAvjc2X2mPrdiF_0731451842952413" "installationSpells" #array-inline-0 "relayId" "12D3KooWFbasz6SnGxhPq3KWn8KgNW4asNKskxR5JizMdszM4KCN" "timestamp" "2023-10-25T22:15:41.362Z"] Host_obj)
                                      )
                                      (xor
                                       (ap Host_obj $option-inline)
                                       (null)
                                      )
                                     )
                                     (canon %init_peer_id% $option-inline  #option-inline-0)
                                    )
                                   )
                                   (call %init_peer_id% ("json" "obj") ["defaultWorker" #option-inline-0] Hosts_obj)
                                  )
                                  (ap Hosts_obj.$.defaultWorker Hosts_obj_flat)
                                 )
                                 (ap Hosts_obj_flat.$.[0].installationSpells Hosts_obj_flat_flat)
                                )
                                (new $results_test
                                 (seq
                                  (seq
                                   (seq
                                    (call %init_peer_id% ("math" "add") [2 1] results_incr)
                                    (fold $results results_fold_var
                                     (seq
                                      (seq
                                       (ap results_fold_var $results_test)
                                       (canon %init_peer_id% $results_test  #results_iter_canon)
                                      )
                                      (xor
                                       (match #results_iter_canon.length results_incr
                                        (null)
                                       )
                                       (next results_fold_var)
                                      )
                                     )
                                     (never)
                                    )
                                   )
                                   (canon %init_peer_id% $results_test  #results_result_canon)
                                  )
                                  (ap #results_result_canon results_gate)
                                 )
                                )
                               )
                               (new $results_test-0
                                (seq
                                 (seq
                                  (seq
                                   (call %init_peer_id% ("math" "add") [0 1] results_incr-0)
                                   (fold $results results_fold_var-0
                                    (seq
                                     (seq
                                      (ap results_fold_var-0 $results_test-0)
                                      (canon %init_peer_id% $results_test-0  #results_iter_canon-0)
                                     )
                                     (xor
                                      (match #results_iter_canon-0.length results_incr-0
                                       (null)
                                      )
                                      (next results_fold_var-0)
                                     )
                                    )
                                    (never)
                                   )
                                  )
                                  (canon %init_peer_id% $results_test-0  #results_result_canon-0)
                                 )
                                 (ap #results_result_canon-0 results_gate-0)
                                )
                               )
                              )
                              (new $results_test-1
                               (seq
                                (seq
                                 (seq
                                  (call %init_peer_id% ("math" "add") [1 1] results_incr-1)
                                  (fold $results results_fold_var-1
                                   (seq
                                    (seq
                                     (ap results_fold_var-1 $results_test-1)
                                     (canon %init_peer_id% $results_test-1  #results_iter_canon-1)
                                    )
                                    (xor
                                     (match #results_iter_canon-1.length results_incr-1
                                      (null)
                                     )
                                     (next results_fold_var-1)
                                    )
                                   )
                                   (never)
                                  )
                                 )
                                 (canon %init_peer_id% $results_test-1  #results_result_canon-1)
                                )
                                (ap #results_result_canon-1 results_gate-1)
                               )
                              )
                             )
                             (xor
                              (match results_gate-0.$.[0] results_gate-1.$.[1]
                               (ap true eq)
                              )
                              (ap false eq)
                             )
                            )
                            (xor
                             (match eq false
                              (ap eq and)
                             )
                             (seq
                              (seq
                               (seq
                                (new $results_test-2
                                 (seq
                                  (seq
                                   (seq
                                    (call %init_peer_id% ("math" "add") [1 1] results_incr-2)
                                    (fold $results results_fold_var-2
                                     (seq
                                      (seq
                                       (ap results_fold_var-2 $results_test-2)
                                       (canon %init_peer_id% $results_test-2  #results_iter_canon-2)
                                      )
                                      (xor
                                       (match #results_iter_canon-2.length results_incr-2
                                        (null)
                                       )
                                       (next results_fold_var-2)
                                      )
                                     )
                                     (never)
                                    )
                                   )
                                   (canon %init_peer_id% $results_test-2  #results_result_canon-2)
                                  )
                                  (ap #results_result_canon-2 results_gate-2)
                                 )
                                )
                                (new $results_test-3
                                 (seq
                                  (seq
                                   (seq
                                    (call %init_peer_id% ("math" "add") [2 1] results_incr-3)
                                    (fold $results results_fold_var-3
                                     (seq
                                      (seq
                                       (ap results_fold_var-3 $results_test-3)
                                       (canon %init_peer_id% $results_test-3  #results_iter_canon-3)
                                      )
                                      (xor
                                       (match #results_iter_canon-3.length results_incr-3
                                        (null)
                                       )
                                       (next results_fold_var-3)
                                      )
                                     )
                                     (never)
                                    )
                                   )
                                   (canon %init_peer_id% $results_test-3  #results_result_canon-3)
                                  )
                                  (ap #results_result_canon-3 results_gate-3)
                                 )
                                )
                               )
                               (xor
                                (match results_gate-2.$.[1] results_gate-3.$.[2]
                                 (ap true eq-0)
                                )
                                (ap false eq-0)
                               )
                              )
                              (ap eq-0 and)
                             )
                            )
                           )
                           (xor
                            (match and true
                             (seq
                              (call %init_peer_id% ("run-console" "print") ["We have consensus"])
                              (ap true $consensus)
                             )
                            )
                            (ap false $consensus)
                           )
                          )
                          (new $consensus_test
                           (seq
                            (seq
                             (seq
                              (call %init_peer_id% ("math" "add") [0 1] consensus_incr)
                              (fold $consensus consensus_fold_var
                               (seq
                                (seq
                                 (ap consensus_fold_var $consensus_test)
                                 (canon %init_peer_id% $consensus_test  #consensus_iter_canon)
                                )
                                (xor
                                 (match #consensus_iter_canon.length consensus_incr
                                  (null)
                                 )
                                 (next consensus_fold_var)
                                )
                               )
                               (never)
                              )
                             )
                             (canon %init_peer_id% $consensus_test  #consensus_result_canon)
                            )
                            (ap #consensus_result_canon consensus_gate)
                           )
                          )
                         )
                        )
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 0])
                       )
                      )
                      (canon %init_peer_id% $results  #results_canon)
                     )
                     (call %init_peer_id% ("callbackSrv" "response") [#results_canon consensus_gate.$.[0]])
                    )
    `
 
export type ConsensusResult = [string[], boolean]
export function consensus(
    name: string,
    config?: {ttl?: number}
): Promise<ConsensusResult>;

export function consensus(
    peer: IFluenceClient$$,
    name: string,
    config?: {ttl?: number}
): Promise<ConsensusResult>;

export function consensus(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "consensus",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "name" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                },
                {
                    "tag" : "scalar",
                    "name" : "bool"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        consensus_script
    )
}

export const clearPeers_script = `
                    (seq
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (xor
                        (seq
                         (seq
                          (seq
                           (seq
                            (new $option-inline
                             (seq
                              (seq
                               (seq
                                (new $array-inline
                                 (seq
                                  (seq
                                   (seq
                                    (seq
                                     (seq
                                      (seq
                                       (call %init_peer_id% ("json" "obj") ["hostId" "12D3KooWFbasz6SnGxhPq3KWn8KgNW4asNKskxR5JizMdszM4KCN" "spellId" "274cf5b0-c244-4777-a5f1-a4658019156b" "workerId" "12D3KooWHXZoS1CRQihNU7zoBQtCkZoysHVW4ZGNRcvXJZdiTjAs"] SpellLocation_obj)
                                       (call %init_peer_id% ("json" "obj") ["hostId" "12D3KooWBCAWAGNMfqaBG1kUv49dkK8wSNeiTfGubLLjGQaFBf6z" "spellId" "364fabd1-47aa-4eb8-b266-16a278c82a4d" "workerId" "12D3KooWQGU6LLHEaXPAHygopNwSctbNGtiG8UhqWuPSmu4AJBV9"] SpellLocation_obj-0)
                                      )
                                      (call %init_peer_id% ("json" "obj") ["hostId" "12D3KooWEqbHHE1bzk1nJ8LE2Wbm2UaycYjRsSB4CTxDS342Boip" "spellId" "fd572d5a-70ff-411b-9a4c-9cede08db361" "workerId" "12D3KooWRHzLGQ9FxitVpt6RtYrxM8XfTci2yuNWAKEYbZbzxSqc"] SpellLocation_obj-1)
                                     )
                                     (ap SpellLocation_obj $array-inline)
                                    )
                                    (ap SpellLocation_obj-0 $array-inline)
                                   )
                                   (ap SpellLocation_obj-1 $array-inline)
                                  )
                                  (canon %init_peer_id% $array-inline  #array-inline-0)
                                 )
                                )
                                (call %init_peer_id% ("json" "obj") ["definition" "bafkreicmunaohvcik2z7unysh2pcdhmt7gofvwecwkfoqvtvw3qn7mkdxa" "dummyDealId" "defaultWorker_12D3KooWLbTpQHXCSHiULa6NZC3WCzEehY3PwNmAvjc2X2mPrdiF_0731451842952413" "installationSpells" #array-inline-0 "relayId" "12D3KooWFbasz6SnGxhPq3KWn8KgNW4asNKskxR5JizMdszM4KCN" "timestamp" "2023-10-25T22:15:41.362Z"] Host_obj)
                               )
                               (xor
                                (ap Host_obj $option-inline)
                                (null)
                               )
                              )
                              (canon %init_peer_id% $option-inline  #option-inline-0)
                             )
                            )
                            (call %init_peer_id% ("json" "obj") ["defaultWorker" #option-inline-0] Hosts_obj)
                           )
                           (ap Hosts_obj.$.defaultWorker Hosts_obj_flat)
                          )
                          (ap Hosts_obj_flat.$.[0].installationSpells Hosts_obj_flat_flat)
                         )
                         (fold Hosts_obj_flat_flat w-0
                          (seq
                           (xor
                            (seq
                             (seq
                              (seq
                               (seq
                                (seq
                                 (seq
                                  (new $-ephemeral-stream-
                                   (new #-ephemeral-canon-
                                    (canon -relay- $-ephemeral-stream-  #-ephemeral-canon-)
                                   )
                                  )
                                  (new $-ephemeral-stream-
                                   (new #-ephemeral-canon-
                                    (canon w-0.$.hostId $-ephemeral-stream-  #-ephemeral-canon-)
                                   )
                                  )
                                 )
                                 (call w-0.$.workerId ("myService" "clear") [] ret)
                                )
                                (call w-0.$.workerId ("run-console" "print") [ret])
                               )
                               (ap true $results)
                              )
                              (new $-ephemeral-stream-
                               (new #-ephemeral-canon-
                                (canon w-0.$.hostId $-ephemeral-stream-  #-ephemeral-canon-)
                               )
                              )
                             )
                             (new $-ephemeral-stream-
                              (new #-ephemeral-canon-
                               (canon -relay- $-ephemeral-stream-  #-ephemeral-canon-)
                              )
                             )
                            )
                            (seq
                             (seq
                              (seq
                               (new $-ephemeral-stream-
                                (new #-ephemeral-canon-
                                 (canon w-0.$.hostId $-ephemeral-stream-  #-ephemeral-canon-)
                                )
                               )
                               (new $-ephemeral-stream-
                                (new #-ephemeral-canon-
                                 (canon -relay- $-ephemeral-stream-  #-ephemeral-canon-)
                                )
                               )
                              )
                              (new $-ephemeral-stream-
                               (new #-ephemeral-canon-
                                (canon %init_peer_id% $-ephemeral-stream-  #-ephemeral-canon-)
                               )
                              )
                             )
                             (fail %last_error%)
                            )
                           )
                           (next w-0)
                          )
                         )
                        )
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 0])
                       )
                      )
                      (canon %init_peer_id% $results  #results_canon)
                     )
                     (call %init_peer_id% ("callbackSrv" "response") [#results_canon])
                    )
    `
 

export function clearPeers(
    config?: {ttl?: number}
): Promise<boolean[]>;

export function clearPeers(
    peer: IFluenceClient$$,
    config?: {ttl?: number}
): Promise<boolean[]>;

export function clearPeers(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "clearPeers",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "bool"
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        clearPeers_script
    )
}

export const greeting_script = `
                    (seq
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "name") [] -name-arg-)
                       )
                       (xor
                        (seq
                         (seq
                          (seq
                           (seq
                            (new $option-inline
                             (seq
                              (seq
                               (seq
                                (new $array-inline
                                 (seq
                                  (seq
                                   (seq
                                    (seq
                                     (seq
                                      (seq
                                       (call %init_peer_id% ("json" "obj") ["hostId" "12D3KooWFbasz6SnGxhPq3KWn8KgNW4asNKskxR5JizMdszM4KCN" "spellId" "274cf5b0-c244-4777-a5f1-a4658019156b" "workerId" "12D3KooWHXZoS1CRQihNU7zoBQtCkZoysHVW4ZGNRcvXJZdiTjAs"] SpellLocation_obj)
                                       (call %init_peer_id% ("json" "obj") ["hostId" "12D3KooWBCAWAGNMfqaBG1kUv49dkK8wSNeiTfGubLLjGQaFBf6z" "spellId" "364fabd1-47aa-4eb8-b266-16a278c82a4d" "workerId" "12D3KooWQGU6LLHEaXPAHygopNwSctbNGtiG8UhqWuPSmu4AJBV9"] SpellLocation_obj-0)
                                      )
                                      (call %init_peer_id% ("json" "obj") ["hostId" "12D3KooWEqbHHE1bzk1nJ8LE2Wbm2UaycYjRsSB4CTxDS342Boip" "spellId" "fd572d5a-70ff-411b-9a4c-9cede08db361" "workerId" "12D3KooWRHzLGQ9FxitVpt6RtYrxM8XfTci2yuNWAKEYbZbzxSqc"] SpellLocation_obj-1)
                                     )
                                     (ap SpellLocation_obj $array-inline)
                                    )
                                    (ap SpellLocation_obj-0 $array-inline)
                                   )
                                   (ap SpellLocation_obj-1 $array-inline)
                                  )
                                  (canon %init_peer_id% $array-inline  #array-inline-0)
                                 )
                                )
                                (call %init_peer_id% ("json" "obj") ["definition" "bafkreicmunaohvcik2z7unysh2pcdhmt7gofvwecwkfoqvtvw3qn7mkdxa" "dummyDealId" "defaultWorker_12D3KooWLbTpQHXCSHiULa6NZC3WCzEehY3PwNmAvjc2X2mPrdiF_0731451842952413" "installationSpells" #array-inline-0 "relayId" "12D3KooWFbasz6SnGxhPq3KWn8KgNW4asNKskxR5JizMdszM4KCN" "timestamp" "2023-10-25T22:15:41.362Z"] Host_obj)
                               )
                               (xor
                                (ap Host_obj $option-inline)
                                (null)
                               )
                              )
                              (canon %init_peer_id% $option-inline  #option-inline-0)
                             )
                            )
                            (call %init_peer_id% ("json" "obj") ["defaultWorker" #option-inline-0] Hosts_obj)
                           )
                           (ap Hosts_obj.$.defaultWorker Hosts_obj_flat)
                          )
                          (ap Hosts_obj_flat.$.[0].installationSpells Hosts_obj_flat_flat)
                         )
                         (fold Hosts_obj_flat_flat w-0
                          (seq
                           (xor
                            (seq
                             (seq
                              (seq
                               (seq
                                (seq
                                 (new $-ephemeral-stream-
                                  (new #-ephemeral-canon-
                                   (canon -relay- $-ephemeral-stream-  #-ephemeral-canon-)
                                  )
                                 )
                                 (new $-ephemeral-stream-
                                  (new #-ephemeral-canon-
                                   (canon w-0.$.hostId $-ephemeral-stream-  #-ephemeral-canon-)
                                  )
                                 )
                                )
                                (call w-0.$.workerId ("myService" "add_peer") [-name-arg-] ret)
                               )
                               (ap ret $results)
                              )
                              (new $-ephemeral-stream-
                               (new #-ephemeral-canon-
                                (canon w-0.$.hostId $-ephemeral-stream-  #-ephemeral-canon-)
                               )
                              )
                             )
                             (new $-ephemeral-stream-
                              (new #-ephemeral-canon-
                               (canon -relay- $-ephemeral-stream-  #-ephemeral-canon-)
                              )
                             )
                            )
                            (seq
                             (seq
                              (seq
                               (new $-ephemeral-stream-
                                (new #-ephemeral-canon-
                                 (canon w-0.$.hostId $-ephemeral-stream-  #-ephemeral-canon-)
                                )
                               )
                               (new $-ephemeral-stream-
                                (new #-ephemeral-canon-
                                 (canon -relay- $-ephemeral-stream-  #-ephemeral-canon-)
                                )
                               )
                              )
                              (new $-ephemeral-stream-
                               (new #-ephemeral-canon-
                                (canon %init_peer_id% $-ephemeral-stream-  #-ephemeral-canon-)
                               )
                              )
                             )
                             (fail %last_error%)
                            )
                           )
                           (next w-0)
                          )
                         )
                        )
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 0])
                       )
                      )
                      (canon %init_peer_id% $results  #results_canon)
                     )
                     (call %init_peer_id% ("callbackSrv" "response") [#results_canon])
                    )
    `
 

export function greeting(
    name: string,
    config?: {ttl?: number}
): Promise<string[]>;

export function greeting(
    peer: IFluenceClient$$,
    name: string,
    config?: {ttl?: number}
): Promise<string[]>;

export function greeting(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "greeting",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "name" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        greeting_script
    )
}

export const imports_script = `
                    (seq
                     (seq
                      (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                      (xor
                       (seq
                        (seq
                         (seq
                          (seq
                           (new $option-inline
                            (seq
                             (seq
                              (seq
                               (new $array-inline
                                (seq
                                 (seq
                                  (seq
                                   (seq
                                    (seq
                                     (seq
                                      (call %init_peer_id% ("json" "obj") ["hostId" "12D3KooWFbasz6SnGxhPq3KWn8KgNW4asNKskxR5JizMdszM4KCN" "spellId" "274cf5b0-c244-4777-a5f1-a4658019156b" "workerId" "12D3KooWHXZoS1CRQihNU7zoBQtCkZoysHVW4ZGNRcvXJZdiTjAs"] SpellLocation_obj)
                                      (call %init_peer_id% ("json" "obj") ["hostId" "12D3KooWBCAWAGNMfqaBG1kUv49dkK8wSNeiTfGubLLjGQaFBf6z" "spellId" "364fabd1-47aa-4eb8-b266-16a278c82a4d" "workerId" "12D3KooWQGU6LLHEaXPAHygopNwSctbNGtiG8UhqWuPSmu4AJBV9"] SpellLocation_obj-0)
                                     )
                                     (call %init_peer_id% ("json" "obj") ["hostId" "12D3KooWEqbHHE1bzk1nJ8LE2Wbm2UaycYjRsSB4CTxDS342Boip" "spellId" "fd572d5a-70ff-411b-9a4c-9cede08db361" "workerId" "12D3KooWRHzLGQ9FxitVpt6RtYrxM8XfTci2yuNWAKEYbZbzxSqc"] SpellLocation_obj-1)
                                    )
                                    (ap SpellLocation_obj $array-inline)
                                   )
                                   (ap SpellLocation_obj-0 $array-inline)
                                  )
                                  (ap SpellLocation_obj-1 $array-inline)
                                 )
                                 (canon %init_peer_id% $array-inline  #array-inline-0)
                                )
                               )
                               (call %init_peer_id% ("json" "obj") ["definition" "bafkreicmunaohvcik2z7unysh2pcdhmt7gofvwecwkfoqvtvw3qn7mkdxa" "dummyDealId" "defaultWorker_12D3KooWLbTpQHXCSHiULa6NZC3WCzEehY3PwNmAvjc2X2mPrdiF_0731451842952413" "installationSpells" #array-inline-0 "relayId" "12D3KooWFbasz6SnGxhPq3KWn8KgNW4asNKskxR5JizMdszM4KCN" "timestamp" "2023-10-25T22:15:41.362Z"] Host_obj)
                              )
                              (xor
                               (ap Host_obj $option-inline)
                               (null)
                              )
                             )
                             (canon %init_peer_id% $option-inline  #option-inline-0)
                            )
                           )
                           (call %init_peer_id% ("json" "obj") ["defaultWorker" #option-inline-0] Hosts_obj)
                          )
                          (ap Hosts_obj.$.defaultWorker Hosts_obj_flat)
                         )
                         (ap Hosts_obj_flat.$.[0].installationSpells Hosts_obj_flat_flat)
                        )
                        (call %init_peer_id% ("run-console" "print") [Hosts_obj_flat_flat])
                       )
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 0])
                      )
                     )
                     (call %init_peer_id% ("callbackSrv" "response") [true])
                    )
    `
 

export function imports(
    config?: {ttl?: number}
): Promise<boolean>;

export function imports(
    peer: IFluenceClient$$,
    config?: {ttl?: number}
): Promise<boolean>;

export function imports(...args: any) {


    return callFunction$$(
        args,
        {
    "functionName" : "imports",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "bool"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        imports_script
    )
}

/* eslint-enable */